# RRoss 20200523
from datetime import date
from datetime import datetime, timedelta
import datetime
import calendar
import pyodbc
import os
import time
import re

#===================================================
def GetThirdFridayDate(iYear, iMonth):
    first_day_of_month = datetime.datetime(int(iYear), int(iMonth), 1)
    first_friday = first_day_of_month + timedelta(days=((4-calendar.monthrange(iYear,iMonth)[0])+7)%7)
    # 4 is friday of week
    third_friday = first_friday + timedelta(days=14)
    return third_friday

#===================================================
def DateToMySQLFormat(DateToConvert):
    #print(DateToConvert)
    sDate = str(DateToConvert)
    #i1stSlash = DateToConvert.find('/')
    #sMonth = DateToConvert[:i1stSlash]
    #i2ndSlash = DateToConvert.find('/', i1stSlash + 1)
    #print('sDate: ' + sDate)
    i1stSlash = sDate.find('/')
    #print('i1stSlash: ' + str(i1stSlash))
    
    if (i1stSlash < 0):
        NewDate = sDate
    else:
        sMonth = sDate[:i1stSlash]
        i2ndSlash = sDate.find('/', i1stSlash + 1)
        #print(i1stSlash)
        #print(i2ndSlash)
        #print(i1stSlash+(i2ndSlash-i1stSlash-1))
        #sDay = DateToConvert[i1stSlash+1:i1stSlash+(i2ndSlash-i1stSlash)]
        sDay = sDate[i1stSlash+1:i1stSlash+(i2ndSlash-i1stSlash)]

        #print('sMonth: ' + sMonth)

        sDay.replace(' ','')
        sMonth.replace(' ','')
        iMonth = int(sMonth)
        sExtra = ''
        if (iMonth < 10):
            sExtra = '0'
        sMonth = sExtra + str(iMonth)

        iDay = int(sDay)
        sExtra = ''
        if (iDay < 10):
            sExtra = '0'
        sDay = sExtra + str(iDay)


        if (len(DateToConvert) -1 < i2ndSlash + 4):
            sYear = DateToConvert[-2:]
            iYear = int(sYear)
            if (iYear < 60):
                sYear = "20" + sYear
            else:
                sYear = "19" + sYear
        else:
            sYear = DateToConvert[-4:]


        #print(sYear)
        #print(sMonth + ' ' + str(len(sMonth)))
        #print(sDay + ' ' + str(len(sDay)))
        NewDate = sYear + '-' + sMonth + '-' + sDay
    
    return NewDate
#===================================================

#===================================================
def SQLInsert(conn, sSQLInsert):
    try:
        conn.execute(sSQLInsert)
        conn.commit()
        return 1
    except:
        print('########################################')
        print(' ')
        print('SQL Insert Error')
        print(sSQLInsert)
        print(' ')
        print('########################################')
        return 0

#===================================================
def MonthNumFromSymbol(sMonthSymbol):
    iAnswer = 0
    if (sMonthSymbol == "F"):
        iAnswer = 1
    if (sMonthSymbol == "G"):
        iAnswer = 2
    if (sMonthSymbol == "H"):
        iAnswer = 3
    if (sMonthSymbol == "J"):
        iAnswer = 4
    if (sMonthSymbol == "K"):
        iAnswer = 5
    if (sMonthSymbol == "M"):
        iAnswer = 6
    if (sMonthSymbol == "N"):
        iAnswer = 7
    if (sMonthSymbol == "Q"):
        iAnswer = 8
    if (sMonthSymbol == "U"):
        iAnswer = 9
    if (sMonthSymbol == "V"):
        iAnswer = 10
    if (sMonthSymbol == "X"):
        iAnswer = 11
    if (sMonthSymbol == "Z"):
        iAnswer = 12

    return iAnswer
#===================================================
def OptionTitleInfo(sOptFileName):
    #print(str(sOptFileName.find('EOM')))
    if (sOptFileName.find('E-miniS&P500') < 0):
        print('Not an Emini Option')
    else:
        OptInfo = sOptFileName.split('_')
        print(OptInfo)
        print(OptInfo[0])
        iYear = int(OptInfo[1][:4])
        iMonth = int(OptInfo[1][5:6])
        #print(OptInfo[1][:4])
        #print(OptInfo[1][5:6])
        #print(str(iYear))
        #print(str(iMonth))
        iWkNum = 0
        sDOW = ""
        iLen = len(OptInfo[0])
        if (iLen == 12):
            if (iMonth==3) or (iMonth==6) or (iMonth==9) or (iMonth==12):
                sType = "QTRLY"
            else:
                sType = "MONTHLY"
        else:
            if (OptInfo[0].find('EOM') >= 0):
                sType = "EOM"
            if (OptInfo[0].find('Week') >= 0):
                sType = "Wkly"
                sDOW = "Fri"
                if (OptInfo[0].find('Wednesday') >= 0):
                    DOW = "Wed"
                if (OptInfo[0].find('Monday') >= 0):
                    DOW = "Mon"
                sWkNum = OptInfo[0][iLen-1:iLen-1]
                
            
        print(str(iLen))
        strike = OptInfo[3].split('.')
        
        return 'ES',sType,iWkNum,sDOW,OptInfo[2],strike[0],iYear,iMonth,OptInfo[1]
#===================================================
def EOMDate(iMonth, iYear):
    sBegOfMonth = str(iMonth) + "/1/" + str(iYear)
    print(sBegOfMonth)
    dtBegOfMonth = datetime.datetime.strptime(sBegOfMonth, '%m/%d/%Y') 
    print(dtBegOfMonth)
    dtLastWeekdayOfMonth = dtBegOfMonth.replace(day=calendar.monthrange(dtBegOfMonth.year,dtBegOfMonth.month)[1])

    if dtLastWeekdayOfMonth.weekday()>=5:
        dtLastWeekdayOfMonth = dtLastWeekdayOfMonth-timedelta(days=1+dtLastWeekdayOfMonth.weekday()-5)

    dtLastWeekdayOfMonth = dtLastWeekdayOfMonth + timedelta(hours=15)    
    return dtLastWeekdayOfMonth

#===================================================
def DowOfWeek(iWeekDay):
    sAnswer = ""
    if (iWeekDay == 0):
        sAnswer = 'Mon'
    if (iWeekDay == 1):
        sAnswer = 'Tue'
    if (iWeekDay == 2):
        sAnswer = 'Wed'
    if (iWeekDay == 3):
        sAnswer = 'Thu'
    if (iWeekDay == 4):
        sAnswer = 'Fri'
    if (iWeekDay == 5):
        sAnswer = 'Sat'
    if (iWeekDay == 6):
        sAnswer = 'Sun'

    return sAnswer
#===================================================



#---------------------------------------------------
#--------- Main Section ----------------------------

conn = pyodbc.connect(r'DRIVER={MySQL ODBC 8.0 UNICODE Driver};SERVER=localhost;UID=root;PWD=T1g3rb0y;')     #PORT=3306;SERVER=localhost;DATABASE=futuresoptions;UID=root;PWD=T1g3rb0y;charset=utf8mb4;')
cursor = conn.cursor()
cursor2 = conn.cursor()


#RRoss 20200523 - Roll through Option Directory
i = 0
sPrevYrMonth = ""
iOptionBreedID = 6
os.chdir('c:\\shared\\data\\options\\es\\eom') 
files = [f for f in os.listdir('.') if os.path.isfile(f)]
for f in files:
    i = i + 1
    if (i > 3):
        break
    print (f)
    Sym, sType, iWkNum, sDOW, sCP, sStrike, iYear, iMonth, sYrMonth = OptionTitleInfo(f)
    
    if (False):
        print(Sym)
        print(sType)
        print(str(iWkNum))
        print(sDOW)
        print(sCP)
        print(sStrike)
        
    if (sYrMonth != sPrevYrMonth):
        dtLastWeekdayOfMonth = EOMDate(iMonth, iYear)
        sPrevYrMonth = sYrMonth
        
    #print('Last Weekday' + str(dtLastWeekdayOfMonth))

    iStrike = int(sStrike) / 100
    iStrike = int(iStrike)
    sAdjStrike = str(iStrike)    
    
    #fileStatsObj = os.stat ( 'c:\\shared\\data\\options\\es\\eom\\' + f )
    sFilePath = 'c:\\shared\\data\\options\\es\\eom\\'
    sFilePath2 = r'c:\\shared\\data\\options\\es\\eom\\'
    sFullFilePath = sFilePath2 + f 
    print(" ")
    print(sFullFilePath)
    print(" ")
    modTimesinceEpoc = os.path.getmtime(sFullFilePath)

    # Convert seconds since epoch to readable timestamp
    modificationTime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(modTimesinceEpoc))
    
    sFileTime = str(modificationTime)
    objFileStats = os.stat(sFullFilePath)
    iFileSize = objFileStats.st_size 
    #print("File Size: " + str(iFileSize))
    #print("Last Modified Time : ", sFileTime )
    
    #sFullFilePathDoubleSlash = sFullFilePath.replace(r"\",r"\\")
    
    iExpiryDOW = dtLastWeekdayOfMonth.weekday()
    #print('Expiry DOW: ' + str(dtLastWeekdayOfMonth.weekday()))
    # RRoss 20200524 - Update DB that File is being processed
    sSQLInsert = "Insert into financialdata.FileProcessLog ("
    sSQLInsert += "FileNameAndPath, "
    sSQLInsert += "FilePath, FileName, "
    sSQLInsert += "UnderlyingSymbol,Expiry,FileSize,FileDateTime,CallPut, "
    sSQLInsert += "Strike,OptExpiryDOW,WeekNum)"
    sSQLInsert += " values ("
    sSQLInsert += "'" + sFullFilePath + "', "
    sSQLInsert += "'" + sFilePath2 + "', "
    sSQLInsert += "'" + f + "', "
    sSQLInsert += "'ES', "
    sSQLInsert += "'" + str(dtLastWeekdayOfMonth) + "', "
    sSQLInsert += "" + str(iFileSize) + ", "
    sSQLInsert += "'" + modificationTime + "', "
    sSQLInsert += "'" + sCP + "', "
    sSQLInsert += "'" + sAdjStrike + "', "
    sSQLInsert += "'" + DowOfWeek(iExpiryDOW) + "', "
    sSQLInsert += "" + str(iWkNum) + ") "
    
    print(sSQLInsert)
    try:
        conn.execute(sSQLInsert)
        conn.commit()
    except:
        print('########################################')
        print(' ')
        print('SQL Insert Error')
        print(sSQLInsert)
        print(' ')
        print('########################################')

            
            
sSQL = "SELECT * FROM financialdata.underlyinginfo;"

if(False):
    cursor.execute(sSQL)
    print(str(cursor.rowcount))

    for row in cursor.fetchall():
        print (row)
        iID = row[0]
        iYear = row[8]
        iMonth = row[7]

    
print('<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')
print(' ')
print(' PROCESS FINISHED ')
print(' ')
print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')
        
conn.close()    
    
    
    
